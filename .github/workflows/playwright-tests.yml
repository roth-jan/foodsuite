name: Playwright Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests every day at 2 AM
    - cron: '0 2 * * *'

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: foodsuite_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps chromium firefox webkit
    
    - name: Setup test environment
      run: |
        cp .env.example .env.test
        echo "DB_TYPE=memory" >> .env.test
        echo "PORT=3003" >> .env.test
        echo "JWT_SECRET=test-secret-key" >> .env.test
    
    - name: Start server
      run: |
        NODE_ENV=test node server.js &
        sleep 5
        curl -f http://localhost:3003/health || exit 1
      env:
        DB_TYPE: memory
        PORT: 3003
    
    - name: Run business logic tests
      run: node test-business-logic-fast.js
      continue-on-error: true
    
    - name: Run comprehensive tests
      run: node test-comprehensive-business-logic.js
      timeout-minutes: 10
      continue-on-error: true
    
    - name: Run Playwright tests
      run: |
        npx playwright test test-inventory-playwright.js
        npx playwright test test-warehouse-playwright.js
      continue-on-error: true
    
    - name: Generate test report
      if: always()
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ -f test-results/summary.json ]; then
          echo "### Business Logic Tests" >> $GITHUB_STEP_SUMMARY
          cat test-results/summary.json | jq -r '"Pass Rate: \(.passRate)%"' >> $GITHUB_STEP_SUMMARY
          cat test-results/summary.json | jq -r '"Critical Issues: \(.criticalIssues)"' >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Files" >> $GITHUB_STEP_SUMMARY
        ls -la test-results/ >> $GITHUB_STEP_SUMMARY || echo "No test results found" >> $GITHUB_STEP_SUMMARY
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.node-version }}
        path: |
          test-results/
          test-screenshots/
        retention-days: 30
    
    - name: Upload Playwright report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-${{ matrix.node-version }}
        path: playwright-report/
        retention-days: 30

  analyze-results:
    needs: test
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all test results
      uses: actions/download-artifact@v4
      with:
        pattern: test-results-*
        merge-multiple: true
    
    - name: Analyze test results
      run: |
        echo "## Combined Test Analysis" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Count total issues across all test runs
        total_issues=$(find . -name "*.json" -exec grep -c "Issue" {} \; | awk '{sum+=$1} END {print sum}')
        echo "Total issues found: ${total_issues:-0}" >> $GITHUB_STEP_SUMMARY
        
    - name: Comment PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let summary = '## üß™ Automated Test Results\n\n';
          
          try {
            const summaryFile = fs.readFileSync('test-results/summary.json', 'utf8');
            const summaryData = JSON.parse(summaryFile);
            
            if (summaryData.passed) {
              summary += '‚úÖ **All tests passed!**\n\n';
            } else {
              summary += `‚ö†Ô∏è **Tests completed with issues**\n\n`;
              summary += `- Pass Rate: ${summaryData.passRate}%\n`;
              summary += `- Critical Issues: ${summaryData.criticalIssues}\n`;
            }
          } catch (e) {
            summary += '‚ùå **Test results could not be parsed**\n';
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });

  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run npm audit
      run: npm audit --production
      continue-on-error: true